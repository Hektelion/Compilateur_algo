Grammar

    0 $accept: algorithme $end

    1 algorithme: algo_definition algo_role declaration debut bloc_instruction fin

    2 algo_definition: TOK_ALGO TOK_ALGO_NAME
    3                | TOK_ALGO
    4                | %empty

    5 algo_role: TOK_ROLE TOK_COMMA TOK_ROLE_DESC
    6          | TOK_ROLE TOK_COMMA
    7          | TOK_ROLE TOK_ROLE_DESC
    8          | TOK_ROLE
    9          | %empty

   10 declaration: TOK_DECLARE declaration
   11            | TOK_ID TOK_COMMA TOK_TYPE declaration
   12            | TOK_ID TOK_COLON declaration
   13            | %empty

   14 debut: TOK_BEGIN

   15 fin: TOK_END

   16 bloc_instruction: instruction bloc_instruction
   17                 | structure_conditionnelle bloc_instruction
   18                 | structure_iterative bloc_instruction
   19                 | %empty

   20 instruction: TOK_ID TOK_PARL arguments TOK_PARR
   21            | TOK_ID TOK_EQUAL expression

   22 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_EIF
   23                         | TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR
   26                    | TOK_WHILE expression TOK_DO bloc_instruction TOK_EWHILE

   27 arguments: argument TOK_COMMA arguments
   28          | argument

   29 argument: expression
   30         | TOK_STRING

   31 expression: operande
   32           | operande TOK_OP expression
   33           | TOK_PARL expression TOK_PARR

   34 operande: TOK_ID
   35         | TOK_INT
   36         | TOK_FLOAT
   37         | TOK_CHAR
   38         | TOK_BOOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_ALGO <chaine> (258) 2 3
    TOK_ALGO_NAME <chaine> (259) 2
    TOK_ROLE <chaine> (260) 5 6 7 8
    TOK_ROLE_DESC <chaine> (261) 5 7
    TOK_DECLARE <chaine> (262) 10
    TOK_BEGIN <chaine> (263) 14
    TOK_END <chaine> (264) 15
    TOK_TYPE <chaine> (265) 11
    TOK_IF <chaine> (266) 22 23
    TOK_ELSE <chaine> (267) 23
    TOK_THEN <chaine> (268) 22 23
    TOK_EIF <chaine> (269) 22 23
    TOK_FOR <chaine> (270) 24 25
    TOK_FROM <chaine> (271) 24 25
    TOK_TO <chaine> (272) 24 25
    TOK_BY_STEP <chaine> (273) 25
    TOK_DO <chaine> (274) 24 25 26
    TOK_EFOR <chaine> (275) 24 25
    TOK_WHILE <chaine> (276) 26
    TOK_EWHILE <chaine> (277) 26
    TOK_INT <chaine> (278) 35
    TOK_FLOAT <chaine> (279) 36
    TOK_CHAR <chaine> (280) 37
    TOK_BOOL <chaine> (281) 38
    TOK_STRING <chaine> (282) 30
    TOK_OP <chaine> (283) 32
    TOK_EQUAL <chaine> (284) 21
    TOK_PARL <chaine> (285) 20 33
    TOK_PARR <chaine> (286) 20 33
    TOK_COLON <chaine> (287) 12
    TOK_COMMA <chaine> (288) 5 6 11 27
    TOK_ID <chaine> (289) 11 12 20 21 24 25 34


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    algorithme <noeud> (36)
        on left: 1
        on right: 0
    algo_definition <noeud> (37)
        on left: 2 3 4
        on right: 1
    algo_role <noeud> (38)
        on left: 5 6 7 8 9
        on right: 1
    declaration <noeud> (39)
        on left: 10 11 12 13
        on right: 1 10 11 12
    debut (40)
        on left: 14
        on right: 1
    fin (41)
        on left: 15
        on right: 1
    bloc_instruction <noeud> (42)
        on left: 16 17 18 19
        on right: 1 16 17 18 22 23 24 25 26
    instruction <noeud> (43)
        on left: 20 21
        on right: 16
    structure_conditionnelle <noeud> (44)
        on left: 22 23
        on right: 17
    structure_iterative <noeud> (45)
        on left: 24 25 26
        on right: 18
    arguments <noeud> (46)
        on left: 27 28
        on right: 20 27
    argument <noeud> (47)
        on left: 29 30
        on right: 27 28
    expression <noeud> (48)
        on left: 31 32 33
        on right: 21 22 23 26 29 32 33
    operande <noeud> (49)
        on left: 34 35 36 37 38
        on right: 24 25 31 32


State 0

    0 $accept: . algorithme $end

    TOK_ALGO  shift, and go to state 1

    $default  reduce using rule 4 (algo_definition)

    algorithme       go to state 2
    algo_definition  go to state 3


State 1

    2 algo_definition: TOK_ALGO . TOK_ALGO_NAME
    3                | TOK_ALGO .

    TOK_ALGO_NAME  shift, and go to state 4

    $default  reduce using rule 3 (algo_definition)


State 2

    0 $accept: algorithme . $end

    $end  shift, and go to state 5


State 3

    1 algorithme: algo_definition . algo_role declaration debut bloc_instruction fin

    TOK_ROLE  shift, and go to state 6

    $default  reduce using rule 9 (algo_role)

    algo_role  go to state 7


State 4

    2 algo_definition: TOK_ALGO TOK_ALGO_NAME .

    $default  reduce using rule 2 (algo_definition)


State 5

    0 $accept: algorithme $end .

    $default  accept


State 6

    5 algo_role: TOK_ROLE . TOK_COMMA TOK_ROLE_DESC
    6          | TOK_ROLE . TOK_COMMA
    7          | TOK_ROLE . TOK_ROLE_DESC
    8          | TOK_ROLE .

    TOK_ROLE_DESC  shift, and go to state 8
    TOK_COMMA      shift, and go to state 9

    $default  reduce using rule 8 (algo_role)


State 7

    1 algorithme: algo_definition algo_role . declaration debut bloc_instruction fin

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 12


State 8

    7 algo_role: TOK_ROLE TOK_ROLE_DESC .

    $default  reduce using rule 7 (algo_role)


State 9

    5 algo_role: TOK_ROLE TOK_COMMA . TOK_ROLE_DESC
    6          | TOK_ROLE TOK_COMMA .

    TOK_ROLE_DESC  shift, and go to state 13

    $default  reduce using rule 6 (algo_role)


State 10

   10 declaration: TOK_DECLARE . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 14


State 11

   11 declaration: TOK_ID . TOK_COMMA TOK_TYPE declaration
   12            | TOK_ID . TOK_COLON declaration

    TOK_COLON  shift, and go to state 15
    TOK_COMMA  shift, and go to state 16


State 12

    1 algorithme: algo_definition algo_role declaration . debut bloc_instruction fin

    TOK_BEGIN  shift, and go to state 17

    debut  go to state 18


State 13

    5 algo_role: TOK_ROLE TOK_COMMA TOK_ROLE_DESC .

    $default  reduce using rule 5 (algo_role)


State 14

   10 declaration: TOK_DECLARE declaration .

    $default  reduce using rule 10 (declaration)


State 15

   12 declaration: TOK_ID TOK_COLON . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 19


State 16

   11 declaration: TOK_ID TOK_COMMA . TOK_TYPE declaration

    TOK_TYPE  shift, and go to state 20


State 17

   14 debut: TOK_BEGIN .

    $default  reduce using rule 14 (debut)


State 18

    1 algorithme: algo_definition algo_role declaration debut . bloc_instruction fin

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 25
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 19

   12 declaration: TOK_ID TOK_COLON declaration .

    $default  reduce using rule 12 (declaration)


State 20

   11 declaration: TOK_ID TOK_COMMA TOK_TYPE . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 29


State 21

   22 structure_conditionnelle: TOK_IF . expression TOK_THEN bloc_instruction TOK_EIF
   23                         | TOK_IF . expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_PARL   shift, and go to state 34
    TOK_ID     shift, and go to state 35

    expression  go to state 36
    operande    go to state 37


State 22

   24 structure_iterative: TOK_FOR . TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR . TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_ID  shift, and go to state 38


State 23

   26 structure_iterative: TOK_WHILE . expression TOK_DO bloc_instruction TOK_EWHILE

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_PARL   shift, and go to state 34
    TOK_ID     shift, and go to state 35

    expression  go to state 39
    operande    go to state 37


State 24

   20 instruction: TOK_ID . TOK_PARL arguments TOK_PARR
   21            | TOK_ID . TOK_EQUAL expression

    TOK_EQUAL  shift, and go to state 40
    TOK_PARL   shift, and go to state 41


State 25

    1 algorithme: algo_definition algo_role declaration debut bloc_instruction . fin

    TOK_END  shift, and go to state 42

    fin  go to state 43


State 26

   16 bloc_instruction: instruction . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 44
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 27

   17 bloc_instruction: structure_conditionnelle . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 45
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 28

   18 bloc_instruction: structure_iterative . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 46
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 29

   11 declaration: TOK_ID TOK_COMMA TOK_TYPE declaration .

    $default  reduce using rule 11 (declaration)


State 30

   35 operande: TOK_INT .

    $default  reduce using rule 35 (operande)


State 31

   36 operande: TOK_FLOAT .

    $default  reduce using rule 36 (operande)


State 32

   37 operande: TOK_CHAR .

    $default  reduce using rule 37 (operande)


State 33

   38 operande: TOK_BOOL .

    $default  reduce using rule 38 (operande)


State 34

   33 expression: TOK_PARL . expression TOK_PARR

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_PARL   shift, and go to state 34
    TOK_ID     shift, and go to state 35

    expression  go to state 47
    operande    go to state 37


State 35

   34 operande: TOK_ID .

    $default  reduce using rule 34 (operande)


State 36

   22 structure_conditionnelle: TOK_IF expression . TOK_THEN bloc_instruction TOK_EIF
   23                         | TOK_IF expression . TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_THEN  shift, and go to state 48


State 37

   31 expression: operande .
   32           | operande . TOK_OP expression

    TOK_OP  shift, and go to state 49

    $default  reduce using rule 31 (expression)


State 38

   24 structure_iterative: TOK_FOR TOK_ID . TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID . TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_FROM  shift, and go to state 50


State 39

   26 structure_iterative: TOK_WHILE expression . TOK_DO bloc_instruction TOK_EWHILE

    TOK_DO  shift, and go to state 51


State 40

   21 instruction: TOK_ID TOK_EQUAL . expression

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_PARL   shift, and go to state 34
    TOK_ID     shift, and go to state 35

    expression  go to state 52
    operande    go to state 37


State 41

   20 instruction: TOK_ID TOK_PARL . arguments TOK_PARR

    TOK_INT     shift, and go to state 30
    TOK_FLOAT   shift, and go to state 31
    TOK_CHAR    shift, and go to state 32
    TOK_BOOL    shift, and go to state 33
    TOK_STRING  shift, and go to state 53
    TOK_PARL    shift, and go to state 34
    TOK_ID      shift, and go to state 35

    arguments   go to state 54
    argument    go to state 55
    expression  go to state 56
    operande    go to state 37


State 42

   15 fin: TOK_END .

    $default  reduce using rule 15 (fin)


State 43

    1 algorithme: algo_definition algo_role declaration debut bloc_instruction fin .

    $default  reduce using rule 1 (algorithme)


State 44

   16 bloc_instruction: instruction bloc_instruction .

    $default  reduce using rule 16 (bloc_instruction)


State 45

   17 bloc_instruction: structure_conditionnelle bloc_instruction .

    $default  reduce using rule 17 (bloc_instruction)


State 46

   18 bloc_instruction: structure_iterative bloc_instruction .

    $default  reduce using rule 18 (bloc_instruction)


State 47

   33 expression: TOK_PARL expression . TOK_PARR

    TOK_PARR  shift, and go to state 57


State 48

   22 structure_conditionnelle: TOK_IF expression TOK_THEN . bloc_instruction TOK_EIF
   23                         | TOK_IF expression TOK_THEN . bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 58
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 49

   32 expression: operande TOK_OP . expression

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_PARL   shift, and go to state 34
    TOK_ID     shift, and go to state 35

    expression  go to state 59
    operande    go to state 37


State 50

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM . operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID TOK_FROM . operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_ID     shift, and go to state 35

    operande  go to state 60


State 51

   26 structure_iterative: TOK_WHILE expression TOK_DO . bloc_instruction TOK_EWHILE

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 61
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 52

   21 instruction: TOK_ID TOK_EQUAL expression .

    $default  reduce using rule 21 (instruction)


State 53

   30 argument: TOK_STRING .

    $default  reduce using rule 30 (argument)


State 54

   20 instruction: TOK_ID TOK_PARL arguments . TOK_PARR

    TOK_PARR  shift, and go to state 62


State 55

   27 arguments: argument . TOK_COMMA arguments
   28          | argument .

    TOK_COMMA  shift, and go to state 63

    $default  reduce using rule 28 (arguments)


State 56

   29 argument: expression .

    $default  reduce using rule 29 (argument)


State 57

   33 expression: TOK_PARL expression TOK_PARR .

    $default  reduce using rule 33 (expression)


State 58

   22 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction . TOK_EIF
   23                         | TOK_IF expression TOK_THEN bloc_instruction . TOK_ELSE bloc_instruction TOK_EIF

    TOK_ELSE  shift, and go to state 64
    TOK_EIF   shift, and go to state 65


State 59

   32 expression: operande TOK_OP expression .

    $default  reduce using rule 32 (expression)


State 60

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande . TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID TOK_FROM operande . TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_TO  shift, and go to state 66


State 61

   26 structure_iterative: TOK_WHILE expression TOK_DO bloc_instruction . TOK_EWHILE

    TOK_EWHILE  shift, and go to state 67


State 62

   20 instruction: TOK_ID TOK_PARL arguments TOK_PARR .

    $default  reduce using rule 20 (instruction)


State 63

   27 arguments: argument TOK_COMMA . arguments

    TOK_INT     shift, and go to state 30
    TOK_FLOAT   shift, and go to state 31
    TOK_CHAR    shift, and go to state 32
    TOK_BOOL    shift, and go to state 33
    TOK_STRING  shift, and go to state 53
    TOK_PARL    shift, and go to state 34
    TOK_ID      shift, and go to state 35

    arguments   go to state 68
    argument    go to state 55
    expression  go to state 56
    operande    go to state 37


State 64

   23 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE . bloc_instruction TOK_EIF

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 69
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 65

   22 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_EIF .

    $default  reduce using rule 22 (structure_conditionnelle)


State 66

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO . operande TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO . operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_ID     shift, and go to state 35

    operande  go to state 70


State 67

   26 structure_iterative: TOK_WHILE expression TOK_DO bloc_instruction TOK_EWHILE .

    $default  reduce using rule 26 (structure_iterative)


State 68

   27 arguments: argument TOK_COMMA arguments .

    $default  reduce using rule 27 (arguments)


State 69

   23 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction . TOK_EIF

    TOK_EIF  shift, and go to state 71


State 70

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande . TOK_DO bloc_instruction TOK_EFOR
   25                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande . TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_BY_STEP  shift, and go to state 72
    TOK_DO       shift, and go to state 73


State 71

   23 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF .

    $default  reduce using rule 23 (structure_conditionnelle)


State 72

   25 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP . operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT    shift, and go to state 30
    TOK_FLOAT  shift, and go to state 31
    TOK_CHAR   shift, and go to state 32
    TOK_BOOL   shift, and go to state 33
    TOK_ID     shift, and go to state 35

    operande  go to state 74


State 73

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO . bloc_instruction TOK_EFOR

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 75
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 74

   25 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande . TOK_DO bloc_instruction TOK_EFOR

    TOK_DO  shift, and go to state 76


State 75

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction . TOK_EFOR

    TOK_EFOR  shift, and go to state 77


State 76

   25 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO . bloc_instruction TOK_EFOR

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 19 (bloc_instruction)

    bloc_instruction          go to state 78
    instruction               go to state 26
    structure_conditionnelle  go to state 27
    structure_iterative       go to state 28


State 77

   24 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR .

    $default  reduce using rule 24 (structure_iterative)


State 78

   25 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction . TOK_EFOR

    TOK_EFOR  shift, and go to state 79


State 79

   25 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR .

    $default  reduce using rule 25 (structure_iterative)
