Terminals unused in grammar

    TOK_FLOAT
    TOK_CHAR
    TOK_BOOL
    TOK_QUOTE


Grammar

    0 $accept: algorithme $end

    1 algorithme: algo_definition algo_role declaration debut programme fin

    2 algo_definition: TOK_ALGO TOK_ALGO_NAME
    3                | TOK_ALGO
    4                | %empty

    5 algo_role: TOK_ROLE TOK_COMMA TOK_ROLE_DESC
    6          | TOK_ROLE TOK_COMMA
    7          | TOK_ROLE TOK_ROLE_DESC
    8          | TOK_ROLE
    9          | %empty

   10 declaration: TOK_DECLARE declaration
   11            | TOK_ID TOK_COLON declaration
   12            | TOK_ID TOK_COMMA TOK_TYPE declaration
   13            | %empty

   14 debut: TOK_BEGIN

   15 fin: TOK_END

   16 programme: bloc_instruction

   17 bloc_instruction: instruction bloc_instruction
   18                 | structure_conditionnelle bloc_instruction
   19                 | structure_iterative bloc_instruction
   20                 | %empty

   21 instruction: TOK_ID TOK_PARL arguments TOK_PARR
   22            | TOK_ID TOK_EQUAL expression

   23 expression: operande
   24           | operande TOK_OP expression
   25           | TOK_PARL expression TOK_PARR

   26 arguments: argument TOK_COMMA arguments
   27          | argument

   28 argument: TOK_STRING
   29         | TOK_ID

   30 operande: TOK_ID
   31         | TOK_INT

   32 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_EIF
   33                         | TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR
   36                    | TOK_WHILE expression TOK_DO bloc_instruction TOK_EWHILE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_ALGO <chaine> (258) 2 3
    TOK_ALGO_NAME <chaine> (259) 2
    TOK_ROLE <chaine> (260) 5 6 7 8
    TOK_ROLE_DESC <chaine> (261) 5 7
    TOK_DECLARE <chaine> (262) 10
    TOK_BEGIN <chaine> (263) 14
    TOK_END <chaine> (264) 15
    TOK_TYPE <chaine> (265) 12
    TOK_IF <chaine> (266) 32 33
    TOK_ELSE <chaine> (267) 33
    TOK_THEN <chaine> (268) 32 33
    TOK_EIF <chaine> (269) 32 33
    TOK_FOR <chaine> (270) 34 35
    TOK_FROM <chaine> (271) 34 35
    TOK_TO <chaine> (272) 34 35
    TOK_BY_STEP <chaine> (273) 35
    TOK_DO <chaine> (274) 34 35 36
    TOK_EFOR <chaine> (275) 34 35
    TOK_WHILE <chaine> (276) 36
    TOK_EWHILE <chaine> (277) 36
    TOK_INT <nombre> (278) 31
    TOK_FLOAT <chaine> (279)
    TOK_CHAR <chaine> (280)
    TOK_BOOL <chaine> (281)
    TOK_STRING <chaine> (282) 28
    TOK_OP <chaine> (283) 24
    TOK_EQUAL <chaine> (284) 22
    TOK_PARL <chaine> (285) 21 25
    TOK_PARR <chaine> (286) 21 25
    TOK_COLON <chaine> (287) 11
    TOK_COMMA <chaine> (288) 5 6 12 26
    TOK_QUOTE <chaine> (289)
    TOK_ID <chaine> (290) 11 12 21 22 29 30 34 35


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    algorithme <chaine> (37)
        on left: 1
        on right: 0
    algo_definition <chaine> (38)
        on left: 2 3 4
        on right: 1
    algo_role <chaine> (39)
        on left: 5 6 7 8 9
        on right: 1
    declaration <chaine> (40)
        on left: 10 11 12 13
        on right: 1 10 11 12
    debut (41)
        on left: 14
        on right: 1
    fin (42)
        on left: 15
        on right: 1
    programme (43)
        on left: 16
        on right: 1
    bloc_instruction <chaine> (44)
        on left: 17 18 19 20
        on right: 16 17 18 19 32 33 34 35 36
    instruction <chaine> (45)
        on left: 21 22
        on right: 17
    expression <chaine> (46)
        on left: 23 24 25
        on right: 22 24 25 32 33 36
    arguments <chaine> (47)
        on left: 26 27
        on right: 21 26
    argument <chaine> (48)
        on left: 28 29
        on right: 26 27
    operande <chaine> (49)
        on left: 30 31
        on right: 23 24 34 35
    structure_conditionnelle <chaine> (50)
        on left: 32 33
        on right: 18
    structure_iterative <chaine> (51)
        on left: 34 35 36
        on right: 19


State 0

    0 $accept: . algorithme $end

    TOK_ALGO  shift, and go to state 1

    $default  reduce using rule 4 (algo_definition)

    algorithme       go to state 2
    algo_definition  go to state 3


State 1

    2 algo_definition: TOK_ALGO . TOK_ALGO_NAME
    3                | TOK_ALGO .

    TOK_ALGO_NAME  shift, and go to state 4

    $default  reduce using rule 3 (algo_definition)


State 2

    0 $accept: algorithme . $end

    $end  shift, and go to state 5


State 3

    1 algorithme: algo_definition . algo_role declaration debut programme fin

    TOK_ROLE  shift, and go to state 6

    $default  reduce using rule 9 (algo_role)

    algo_role  go to state 7


State 4

    2 algo_definition: TOK_ALGO TOK_ALGO_NAME .

    $default  reduce using rule 2 (algo_definition)


State 5

    0 $accept: algorithme $end .

    $default  accept


State 6

    5 algo_role: TOK_ROLE . TOK_COMMA TOK_ROLE_DESC
    6          | TOK_ROLE . TOK_COMMA
    7          | TOK_ROLE . TOK_ROLE_DESC
    8          | TOK_ROLE .

    TOK_ROLE_DESC  shift, and go to state 8
    TOK_COMMA      shift, and go to state 9

    $default  reduce using rule 8 (algo_role)


State 7

    1 algorithme: algo_definition algo_role . declaration debut programme fin

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 12


State 8

    7 algo_role: TOK_ROLE TOK_ROLE_DESC .

    $default  reduce using rule 7 (algo_role)


State 9

    5 algo_role: TOK_ROLE TOK_COMMA . TOK_ROLE_DESC
    6          | TOK_ROLE TOK_COMMA .

    TOK_ROLE_DESC  shift, and go to state 13

    $default  reduce using rule 6 (algo_role)


State 10

   10 declaration: TOK_DECLARE . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 14


State 11

   11 declaration: TOK_ID . TOK_COLON declaration
   12            | TOK_ID . TOK_COMMA TOK_TYPE declaration

    TOK_COLON  shift, and go to state 15
    TOK_COMMA  shift, and go to state 16


State 12

    1 algorithme: algo_definition algo_role declaration . debut programme fin

    TOK_BEGIN  shift, and go to state 17

    debut  go to state 18


State 13

    5 algo_role: TOK_ROLE TOK_COMMA TOK_ROLE_DESC .

    $default  reduce using rule 5 (algo_role)


State 14

   10 declaration: TOK_DECLARE declaration .

    $default  reduce using rule 10 (declaration)


State 15

   11 declaration: TOK_ID TOK_COLON . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 19


State 16

   12 declaration: TOK_ID TOK_COMMA . TOK_TYPE declaration

    TOK_TYPE  shift, and go to state 20


State 17

   14 debut: TOK_BEGIN .

    $default  reduce using rule 14 (debut)


State 18

    1 algorithme: algo_definition algo_role declaration debut . programme fin

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    programme                 go to state 25
    bloc_instruction          go to state 26
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 19

   11 declaration: TOK_ID TOK_COLON declaration .

    $default  reduce using rule 11 (declaration)


State 20

   12 declaration: TOK_ID TOK_COMMA TOK_TYPE . declaration

    TOK_DECLARE  shift, and go to state 10
    TOK_ID       shift, and go to state 11

    $default  reduce using rule 13 (declaration)

    declaration  go to state 30


State 21

   32 structure_conditionnelle: TOK_IF . expression TOK_THEN bloc_instruction TOK_EIF
   33                         | TOK_IF . expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_INT   shift, and go to state 31
    TOK_PARL  shift, and go to state 32
    TOK_ID    shift, and go to state 33

    expression  go to state 34
    operande    go to state 35


State 22

   34 structure_iterative: TOK_FOR . TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR . TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_ID  shift, and go to state 36


State 23

   36 structure_iterative: TOK_WHILE . expression TOK_DO bloc_instruction TOK_EWHILE

    TOK_INT   shift, and go to state 31
    TOK_PARL  shift, and go to state 32
    TOK_ID    shift, and go to state 33

    expression  go to state 37
    operande    go to state 35


State 24

   21 instruction: TOK_ID . TOK_PARL arguments TOK_PARR
   22            | TOK_ID . TOK_EQUAL expression

    TOK_EQUAL  shift, and go to state 38
    TOK_PARL   shift, and go to state 39


State 25

    1 algorithme: algo_definition algo_role declaration debut programme . fin

    TOK_END  shift, and go to state 40

    fin  go to state 41


State 26

   16 programme: bloc_instruction .

    $default  reduce using rule 16 (programme)


State 27

   17 bloc_instruction: instruction . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 42
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 28

   18 bloc_instruction: structure_conditionnelle . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 43
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 29

   19 bloc_instruction: structure_iterative . bloc_instruction

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 44
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 30

   12 declaration: TOK_ID TOK_COMMA TOK_TYPE declaration .

    $default  reduce using rule 12 (declaration)


State 31

   31 operande: TOK_INT .

    $default  reduce using rule 31 (operande)


State 32

   25 expression: TOK_PARL . expression TOK_PARR

    TOK_INT   shift, and go to state 31
    TOK_PARL  shift, and go to state 32
    TOK_ID    shift, and go to state 33

    expression  go to state 45
    operande    go to state 35


State 33

   30 operande: TOK_ID .

    $default  reduce using rule 30 (operande)


State 34

   32 structure_conditionnelle: TOK_IF expression . TOK_THEN bloc_instruction TOK_EIF
   33                         | TOK_IF expression . TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_THEN  shift, and go to state 46


State 35

   23 expression: operande .
   24           | operande . TOK_OP expression

    TOK_OP  shift, and go to state 47

    $default  reduce using rule 23 (expression)


State 36

   34 structure_iterative: TOK_FOR TOK_ID . TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID . TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_FROM  shift, and go to state 48


State 37

   36 structure_iterative: TOK_WHILE expression . TOK_DO bloc_instruction TOK_EWHILE

    TOK_DO  shift, and go to state 49


State 38

   22 instruction: TOK_ID TOK_EQUAL . expression

    TOK_INT   shift, and go to state 31
    TOK_PARL  shift, and go to state 32
    TOK_ID    shift, and go to state 33

    expression  go to state 50
    operande    go to state 35


State 39

   21 instruction: TOK_ID TOK_PARL . arguments TOK_PARR

    TOK_STRING  shift, and go to state 51
    TOK_ID      shift, and go to state 52

    arguments  go to state 53
    argument   go to state 54


State 40

   15 fin: TOK_END .

    $default  reduce using rule 15 (fin)


State 41

    1 algorithme: algo_definition algo_role declaration debut programme fin .

    $default  reduce using rule 1 (algorithme)


State 42

   17 bloc_instruction: instruction bloc_instruction .

    $default  reduce using rule 17 (bloc_instruction)


State 43

   18 bloc_instruction: structure_conditionnelle bloc_instruction .

    $default  reduce using rule 18 (bloc_instruction)


State 44

   19 bloc_instruction: structure_iterative bloc_instruction .

    $default  reduce using rule 19 (bloc_instruction)


State 45

   25 expression: TOK_PARL expression . TOK_PARR

    TOK_PARR  shift, and go to state 55


State 46

   32 structure_conditionnelle: TOK_IF expression TOK_THEN . bloc_instruction TOK_EIF
   33                         | TOK_IF expression TOK_THEN . bloc_instruction TOK_ELSE bloc_instruction TOK_EIF

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 56
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 47

   24 expression: operande TOK_OP . expression

    TOK_INT   shift, and go to state 31
    TOK_PARL  shift, and go to state 32
    TOK_ID    shift, and go to state 33

    expression  go to state 57
    operande    go to state 35


State 48

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM . operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID TOK_FROM . operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT  shift, and go to state 31
    TOK_ID   shift, and go to state 33

    operande  go to state 58


State 49

   36 structure_iterative: TOK_WHILE expression TOK_DO . bloc_instruction TOK_EWHILE

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 59
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 50

   22 instruction: TOK_ID TOK_EQUAL expression .

    $default  reduce using rule 22 (instruction)


State 51

   28 argument: TOK_STRING .

    $default  reduce using rule 28 (argument)


State 52

   29 argument: TOK_ID .

    $default  reduce using rule 29 (argument)


State 53

   21 instruction: TOK_ID TOK_PARL arguments . TOK_PARR

    TOK_PARR  shift, and go to state 60


State 54

   26 arguments: argument . TOK_COMMA arguments
   27          | argument .

    TOK_COMMA  shift, and go to state 61

    $default  reduce using rule 27 (arguments)


State 55

   25 expression: TOK_PARL expression TOK_PARR .

    $default  reduce using rule 25 (expression)


State 56

   32 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction . TOK_EIF
   33                         | TOK_IF expression TOK_THEN bloc_instruction . TOK_ELSE bloc_instruction TOK_EIF

    TOK_ELSE  shift, and go to state 62
    TOK_EIF   shift, and go to state 63


State 57

   24 expression: operande TOK_OP expression .

    $default  reduce using rule 24 (expression)


State 58

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande . TOK_TO operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID TOK_FROM operande . TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_TO  shift, and go to state 64


State 59

   36 structure_iterative: TOK_WHILE expression TOK_DO bloc_instruction . TOK_EWHILE

    TOK_EWHILE  shift, and go to state 65


State 60

   21 instruction: TOK_ID TOK_PARL arguments TOK_PARR .

    $default  reduce using rule 21 (instruction)


State 61

   26 arguments: argument TOK_COMMA . arguments

    TOK_STRING  shift, and go to state 51
    TOK_ID      shift, and go to state 52

    arguments  go to state 66
    argument   go to state 54


State 62

   33 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE . bloc_instruction TOK_EIF

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 67
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 63

   32 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_EIF .

    $default  reduce using rule 32 (structure_conditionnelle)


State 64

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO . operande TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO . operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT  shift, and go to state 31
    TOK_ID   shift, and go to state 33

    operande  go to state 68


State 65

   36 structure_iterative: TOK_WHILE expression TOK_DO bloc_instruction TOK_EWHILE .

    $default  reduce using rule 36 (structure_iterative)


State 66

   26 arguments: argument TOK_COMMA arguments .

    $default  reduce using rule 26 (arguments)


State 67

   33 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction . TOK_EIF

    TOK_EIF  shift, and go to state 69


State 68

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande . TOK_DO bloc_instruction TOK_EFOR
   35                    | TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande . TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR

    TOK_BY_STEP  shift, and go to state 70
    TOK_DO       shift, and go to state 71


State 69

   33 structure_conditionnelle: TOK_IF expression TOK_THEN bloc_instruction TOK_ELSE bloc_instruction TOK_EIF .

    $default  reduce using rule 33 (structure_conditionnelle)


State 70

   35 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP . operande TOK_DO bloc_instruction TOK_EFOR

    TOK_INT  shift, and go to state 31
    TOK_ID   shift, and go to state 33

    operande  go to state 72


State 71

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO . bloc_instruction TOK_EFOR

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 73
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 72

   35 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande . TOK_DO bloc_instruction TOK_EFOR

    TOK_DO  shift, and go to state 74


State 73

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction . TOK_EFOR

    TOK_EFOR  shift, and go to state 75


State 74

   35 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO . bloc_instruction TOK_EFOR

    TOK_IF     shift, and go to state 21
    TOK_FOR    shift, and go to state 22
    TOK_WHILE  shift, and go to state 23
    TOK_ID     shift, and go to state 24

    $default  reduce using rule 20 (bloc_instruction)

    bloc_instruction          go to state 76
    instruction               go to state 27
    structure_conditionnelle  go to state 28
    structure_iterative       go to state 29


State 75

   34 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_DO bloc_instruction TOK_EFOR .

    $default  reduce using rule 34 (structure_iterative)


State 76

   35 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction . TOK_EFOR

    TOK_EFOR  shift, and go to state 77


State 77

   35 structure_iterative: TOK_FOR TOK_ID TOK_FROM operande TOK_TO operande TOK_BY_STEP operande TOK_DO bloc_instruction TOK_EFOR .

    $default  reduce using rule 35 (structure_iterative)
